<head>
  <%- include('../partials/head') %>
    <title>SGV | Crear Venta</title>
</head>

<body>
  <%- include('../partials/navbar') %>
    <!-- Contenido -->
    <section id="services" class="services">
      <div class="container">
        <br> <br> <br>
        <div class="section-title" data-aos="fade-up">
          <h2>ACTUALIZAR VENTAS</h2>
          <p>Ingrese los datos para actualizar una nueva venta.</p>
        </div>
        <form id="form" class="card card-body" onsubmit="event.preventDefault(); update(event)">
          <fieldset>
            <div class="row">
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="factura" class="form-label">Numero de factura:</label>
                  <input id="factura" class="form-control mb-3" value="<%= sale.factura %>" readonly>
                </div>
              </div>
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="newFecha" class="form-label">Fecha:</label>
                  <input id="newFecha" class="form-control mb-3" placeholder="Nueva Fecha" value="<%= sale.fecha %>">
                </div>
              </div>
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="newHora" class="form-label">Hora:</label>
                  <input type="text" id="newHora" class="form-control mb-3" placeholder="Nueva Hora" value="<%= sale.hora %>">
                </div>
              </div>
            </div>
            <div class="row justify-content-center">
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="ci" class="form-label text-center">Cedula:</label>
                  <input type="text" class="form-control" id="ci" name="ci" required onblur="verificarCedula()">
                </div>
              </div>
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="newCliente" class="form-label text-center">Cliente:</label>
                  <input id="newCliente" class="form-control mb-3" placeholder="Nuevo Cliente" value="<%= sale.cliente %>" disabled>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="subtotal" class="form-label">Subtotal:</label>
                  <input type="number" class="form-control" id="subtotal" name="subtotal" readonly>
                </div>
              </div>
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="descuento" class="form-label">Descuento:</label>
                  <input type="number" class="form-control" id="descuento" name="descuento" readonly>
                </div>
              </div>
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="iva" class="form-label">IVA:</label>
                  <input type="number" class="form-control" id="iva" name="iva" value="0.15" readonly step="0.01">
                </div>
              </div>
            </div>
            <div class="row justify-content-center">
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="total" class="form-label text-center">Total:</label>
                  <input style="border: 5px solid rgb(0, 255, 0)" type="number" class="form-control" id="total" name="total" placeholder="$" readonly>
                </div>
              </div>
            </div>
            <hr>
            <div class="mb-3 text-center">
              <button type="button" class="btn btn-primary" onclick="agregarProducto()">
                <i class="fas fa-plus"></i> Agregar Producto
              </button>
            </div>
            <div class="text-center">
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Actualizar Venta
              </button>
            </div>
            <br>
            <div id="product-inputs" class="container">
              <!-- Usar un bucle para generar filas -->
              <% for (var i=0; i < numberOfRows; i++) { %>
              <div class="row">
                <div class="col-md-3">
                  <div class="mb-3">
                    <!-- Utilizar un id único concatenando el índice de la fila -->
                    <label for="id_<%= i %>" class="form-label">ID:</label>
                    <input type="text" class="form-control" id="id_<%= i %>" name="id" required onchange="buscarProductoPorId(this)">
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="producto_<%= i %>" class="form-label">Producto:</label>
                    <input type="text" class="form-control" id="producto_<%= i %>" name="producto" required readonly>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="precio_<%= i %>" class="form-label">Precio:</label>
                    <input type="number" class="form-control" id="precio_<%= i %>" name="precio" readonly required placeholder="$" onchange="calcularSubtotal()">
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="cantidad_<%= i %>" class="form-label">Cantidad:</label>
                    <input type="number" class="form-control" id="cantidad_<%= i %>" name="cantidad" required onchange="calcularSubtotal()">
                  </div>
                </div>
              </div>
              <% } %>
            </div>
          </fieldset>
        </form>             
      </div>
    </section>
    <%- include('../partials/footer') %>
    <script>
      // Función para buscar un producto por su ID
      function buscarProductoPorId(input) {
        
        const id = input.value;
        const row = input.closest('.row');
        fetch('/json/products.json')
          .then(response => response.json())
          .then(data => {
            // Buscar el producto por su ID
            const productoEncontrado = data.find(producto => producto.id === parseInt(id));
            if (productoEncontrado) {
              // Llenar los campos con la información del producto encontrado
              row.querySelector('[name="producto"]').value = productoEncontrado.descripcion;
              row.querySelector('[name="precio"]').value = productoEncontrado.precio;
            } else {
              // Si no se encuentra el producto, limpiar los campos
              row.querySelector('[name="producto"]').value = '';
              row.querySelector('[name="precio"]').value = '';
              // Mostrar SweetAlert indicando que el producto no se encuentra registrado
              Swal.fire({
                icon: 'error',
                title: 'Producto no encontrado',
                text: 'El producto no se encuentra registrado en la base de datos.',
              });
            }
          })
          .catch(error => console.error('Error al buscar producto:', error));
      }

      // Agregar un event listener al campo de ID para ejecutar la función verificarId() cuando cambie
      document.querySelectorAll('[name="id"]').forEach(input => {
        input.addEventListener('input', function () {
          buscarProductoPorId(this);
        });
      });

      // Función para ejecutar cuando se ingresa un ID en el campo correspondiente
      function verificarId() {
        const id = document.getElementById('id').value;
        if (id) {
          buscarProductoPorId(id); // Llama a la función para buscar el producto
        } else {
          document.getElementById('producto').value = '';
          document.getElementById('precio').value = '';
        }
      }

      // Agregar un event listener al campo de ID para ejecutar la función verificarId() cuando cambie
      document.getElementById('id').addEventListener('input', verificarId);
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      // Obtener referencia a los elementos de fecha y hora
      var fechaInput = document.getElementById('fecha');
      var horaInput = document.getElementById('hora');

      // Función para actualizar la fecha y hora en tiempo real
      function actualizarFechaYHora() {
        var fechaActual = new Date().toISOString().slice(0, 10); // Obtener la fecha actual en formato YYYY-MM-DD
        var horaActual = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' }); // Obtener la hora actual en formato HH:MM

        // Asignar los valores obtenidos a los elementos de fecha y hora
        fechaInput.value = fechaActual;
        horaInput.value = horaActual;
      }

      // Llamar a la función inicialmente para establecer la fecha y hora al cargar la página
      actualizarFechaYHora();

      // Actualizar la fecha y hora cada segundo
      setInterval(actualizarFechaYHora, 1000);
    </script>
    <script>

      function agregarProducto() {
        const productInputs = document.getElementById('product-inputs');
        const newRow = `
    <div class="row">
      <div class="col-md-3">
        <div class="mb-3">
          <label for="id" class="form-label">ID:</label>
          <input type="number" class="form-control" name="id" required onchange="buscarProductoPorId(this)">
        </div>
      </div>
      <div class="col-md-3">
        <div class="mb-3">
          <label for="producto" class="form-label">Producto:</label>
          <input type="text" class="form-control" name="producto" required readonly>
        </div>
      </div>
      <div class="col-md-3">
        <div class="mb-3">
          <label for="precio" class="form-label">Precio:</label>
          <input type="number" class="form-control" name="precio" readonly required placeholder="$" onchange="calcularSubtotal()">
        </div>
      </div>
      <div class="col-md-3">
        <div class="mb-3">
          <label for="cantidad" class="form-label">Cantidad:</label>
          <input type="number" class="form-control" name="cantidad" required onchange="calcularSubtotal()">
        </div>
      </div>
    </div>
  `;
        productInputs.insertAdjacentHTML('beforeend', newRow);
      }


      // Función para calcular el subtotal
      function calcularSubtotal() {
        const precioInputs = document.querySelectorAll('input[name="precio"]');
        const cantidadInputs = document.querySelectorAll('input[name="cantidad"]');
        let subtotal = 0;
        precioInputs.forEach((precioInput, index) => {
          const precio = parseFloat(precioInput.value || 0);
          const cantidad = parseInt(cantidadInputs[index].value || 0);
          subtotal += precio * cantidad;
        });
        // Mostrar el subtotal en su campo correspondiente
        document.getElementById('subtotal').value = subtotal;
        // Recalcular el total con el descuento aplicado
        calcularTotal();
      }

      // Función para calcular el total
      function calcularTotal() {
        const subtotal = parseFloat(document.getElementById('subtotal').value || 0);
        const descuento = parseFloat(document.getElementById('descuento').value || 0);
        const iva = parseFloat(document.getElementById('iva').value || 0);

        // Calcular el total según la fórmula dada
        const total = Math.round((subtotal + iva - descuento) * 100) / 100;

        // Mostrar el total en su campo correspondiente
        document.getElementById('total').value = total.toFixed(2);
      }


      // Agregar un event listener para el evento de cambio en los campos de precio, cantidad y descuento
      document.addEventListener('change', function (event) {
        if (event.target && (event.target.name === 'precio' || event.target.name === 'cantidad' || event.target.name === 'descuento')) {
          calcularSubtotal();
        }
      });
      function update(event) {
        // Recolectar la información de la venta
        const factura = document.getElementById('factura').value;
        const fecha = document.getElementById('newFecha').value;
        const hora = document.getElementById('newHora').value;
        const cliente = document.getElementById('newCliente').value;
        const subtotal = parseFloat(document.getElementById('subtotal').value);
        const descuento = parseFloat(document.getElementById('descuento').value);
        const iva = parseFloat(document.getElementById('iva').value);
        const total = parseFloat(document.getElementById('total').value);
        // Recolectar la información de los productos
        const productos = [];
        const productInputRows = document.querySelectorAll('#product-inputs .row');
        productInputRows.forEach((row) => {
            const producto = row.querySelector('input[name="producto"]').value;
            const precio = parseFloat(row.querySelector('input[name="precio"]').value);
            const cantidad = parseInt(row.querySelector('input[name="cantidad"]').value);
            productos.push({ producto, precio, cantidad });
        });
      
        // Crear objeto de venta
        const venta = {
            factura,
            fecha,
            hora,
            cliente,
            subtotal,
            descuento,
            iva,
            total,
            detalle: productos
        };
      
        Swal.fire({
            title: '¿Estás seguro?',
            text: '¿Deseas actualizar esta venta?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Aceptar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
          if (result.isConfirmed) {
            // Enviar la venta actualizada al servidor
            fetch(`/sales/update/${factura}`, { // Usar la ruta adecuada para la actualización
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(venta),
            })
            .then((response) => response.json())
            .then((data) => {
                console.log('Venta actualizada:', data);
            })
            .catch((error) => {
                console.error('Error al actualizar la venta:', error);
            })
            .finally(() => {
                // Mostrar la alerta de éxito
                Swal.fire({
                    icon: 'success',
                    title: '¡Venta actualizada correctamente!',
                    text: '¡La venta ha sido actualizada con éxito!',
                }).then(() => {
                    // Recargar la página después de hacer clic en Aceptar en la alerta
                    window.location.reload();
                });
            });
          }
        });
        // Evitar que se envíe el formulario por defecto
        event.preventDefault();
      }
    </script>

    <script>
      function verificarCedula() {
        const cedula = document.getElementById('ci').value;
        if (cedula) {
          buscarClientePorCedula(cedula); // Llama a la función para buscar el cliente
        } else {
          document.getElementById('newCliente').value = '';
          document.getElementById('descuento').value = ''; // Limpiar el campo de descuento si la cédula está vacía
        }
      }


      // Agregar la función para buscar el cliente por su cédula
      function buscarClientePorCedula(cedula) {
        const timestamp = Date.now();
        fetch(`/clients/discount/${cedula}?timestamp=${timestamp}`)
          .then(response => {
            if (!response.ok) {
              throw new Error('Cliente no encontrado');
            }
            return response.json();
          })
          .then(data => {
            document.getElementById('descuento').value = data.descuento;
            document.getElementById('descuento').setAttribute('readonly', 'true');
            document.getElementById('newCliente').value = data.cliente; // Asignar el nombre y apellido del cliente
          })
          .catch(error => {
            console.error('Error al buscar cliente:', error);
            // Mostrar un mensaje de error al usuario o realizar otra acción si no se encuentra el cliente
          });
      }
    </script>
</body>